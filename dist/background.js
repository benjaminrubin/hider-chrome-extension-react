/*! For license information please see background.js.LICENSE.txt */
(()=>{"use strict";var t={408:(t,e)=>{Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.iterator;var r={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},n=Object.assign,o={};function a(t,e,n){this.props=t,this.context=e,this.refs=o,this.updater=n||r}function i(){}function c(t,e,n){this.props=t,this.context=e,this.refs=o,this.updater=n||r}a.prototype.isReactComponent={},a.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,t,e,"setState")},a.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},i.prototype=a.prototype;var s=c.prototype=new i;s.constructor=c,n(s,a.prototype),s.isPureReactComponent=!0;Array.isArray,Object.prototype.hasOwnProperty},294:(t,e,r)=>{r(408)}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var a=e[n]={exports:{}};return t[n](a,a.exports,r),a.exports}(()=>{var t="show",e="hide",n="displayed";r(294);var o,a,i={version:1,lastSelectedState:{lastSelectedApp:"youtube",lastSelectedPage:"home_page"},youtube:(o={navigation:{label:"Navigation"},player:{label:"â–¶"},"title-and-description":{label:"Title and Description"},comments:{label:"Comments"},recommendations:{label:"Recs"},"live-chat":{label:"Live Chat"},videos:{label:"Videos"},homeShorts:{label:"Shorts"},searchShorts:{label:"Shorts"},sidebar:{label:"Sidebar"},results:{label:"Results"}},a={},Object.keys(o).forEach((function(t){a[t]={state:n}})),a)};function c(t){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},c(t)}function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,a,i,c=[],s=!0,u=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=a.call(r)).done)&&(c.push(n.value),c.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{if(!s&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(u)throw o}}return c}}(t,e)||u(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(t,e){if(t){if("string"==typeof t)return l(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?l(t,e):void 0}}function l(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function f(){f=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function l(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof g?e:g,i=Object.create(a.prototype),c=new P(n||[]);return o(i,"_invoke",{value:_(t,r,c)}),i}function p(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var y="suspendedStart",d="suspendedYield",m="executing",v="completed",b={};function g(){}function w(){}function S(){}var x={};l(x,i,(function(){return this}));var L=Object.getPrototypeOf,k=L&&L(L(I([])));k&&k!==r&&n.call(k,i)&&(x=k);var E=S.prototype=g.prototype=Object.create(x);function O(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function j(t,e){function r(o,a,i,s){var u=p(t[o],t,a);if("throw"!==u.type){var l=u.arg,f=l.value;return f&&"object"==c(f)&&n.call(f,"__await")?e.resolve(f.__await).then((function(t){r("next",t,i,s)}),(function(t){r("throw",t,i,s)})):e.resolve(f).then((function(t){l.value=t,i(l)}),(function(t){return r("throw",t,i,s)}))}s(u.arg)}var a;o(this,"_invoke",{value:function(t,n){function o(){return new e((function(e,o){r(t,n,e,o)}))}return a=a?a.then(o,o):o()}})}function _(e,r,n){var o=y;return function(a,i){if(o===m)throw new Error("Generator is already running");if(o===v){if("throw"===a)throw i;return{value:t,done:!0}}for(n.method=a,n.arg=i;;){var c=n.delegate;if(c){var s=T(c,n);if(s){if(s===b)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===y)throw o=v,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=m;var u=p(e,r,n);if("normal"===u.type){if(o=n.done?v:d,u.arg===b)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(o=v,n.method="throw",n.arg=u.arg)}}}function T(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,T(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),b;var a=p(o,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,b;var i=a.arg;return i?i.done?(r[e.resultName]=i.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,b):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,b)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function N(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function I(e){if(e||""===e){var r=e[i];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(c(e)+" is not iterable")}return w.prototype=S,o(E,"constructor",{value:S,configurable:!0}),o(S,"constructor",{value:w,configurable:!0}),w.displayName=l(S,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===w||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,S):(t.__proto__=S,l(t,u,"GeneratorFunction")),t.prototype=Object.create(E),t},e.awrap=function(t){return{__await:t}},O(j.prototype),l(j.prototype,s,(function(){return this})),e.AsyncIterator=j,e.async=function(t,r,n,o,a){void 0===a&&(a=Promise);var i=new j(h(t,r,n,o),a);return e.isGeneratorFunction(r)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},O(E),l(E,u,"Generator"),l(E,i,(function(){return this})),l(E,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=I,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(N),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return c.type="throw",c.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var s=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=t,i.arg=e,a?(this.method="next",this.next=a.finallyLoc,b):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),b},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),N(r),b}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;N(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:I(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),b}},e}function h(t,e,r,n,o,a,i){try{var c=t[a](i),s=c.value}catch(t){return void r(t)}c.done?e(s):Promise.resolve(s).then(n,o)}function p(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var a=t.apply(e,r);function i(t){h(a,n,o,i,c,"next",t)}function c(t){h(a,n,o,i,c,"throw",t)}i(void 0)}))}}var y="www.youtube.com",d={"www.youtube.com":{app:"youtube",pages:{"/watch":"video_page","/results":"search_page","/":"home_page"}},"www.tiktok.com":{app:"tiktok",pages:{}}},m={youtube:{navigation:["masthead-container"],player:["player"],"title-and-description":["above-the-fold"],comments:["comments"],recommendations:["related","items"],"live-chat":["chat-container"],homeShorts:[],searchShorts:[],videos:["primary"],sidebar:["guide-content"],results:["page-manager"]},results:{},home:{},tiktok:{url:"www.tiktok.com"}};function v(t,e,r,n){var o=JSON.parse(n)[t][e];if(o&&o.length>0){var a,i=function(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=u(t))){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return i=t.done,t},e:function(t){c=!0,a=t},f:function(){try{i||null==r.return||r.return()}finally{if(c)throw a}}}}(o);try{for(i.s();!(a=i.n()).done;){var c=a.value,s=document.getElementById(c),l=window.getComputedStyle(s).display;switch(r){case"show":"none"===l&&(s.style.display="");break;case"hide":"none"!==l&&(s.style.display="none")}}}catch(t){i.e(t)}finally{i.f()}}}function b(t,e,r,n){JSON.parse(n);var o={homeShorts:{innerText:"shorts",selector:"#dismissible"},searchShorts:{innerText:"shorts",selector:"ytd-reel-shelf-renderer"},peopleAlsoWatched:"people also watched"},a=function(t){(function(t,e){return t.innerText.toLowerCase().includes(e.toLowerCase())})(t,o[e].innerText)&&(t.style.display="hide"===r?"none":"")};document.querySelectorAll(o[e].selector).forEach(a),new MutationObserver((function(t){t.forEach((function(t){t.addedNodes.forEach((function(t){"dismissible"===t.id&&a(t)}))}))})).observe(document.body,{childList:!0,subtree:!0})}chrome.runtime.onInstalled.addListener(p(f().mark((function t(){var e;return f().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,chrome.storage.local.get("appState");case 2:if((e=t.sent)&&"1"===e.version){t.next=6;break}return t.next=6,chrome.storage.local.set({appState:i});case 6:case"end":return t.stop()}}),t)})))),chrome.runtime.onMessage.addListener(function(){var t=p(f().mark((function t(r,o,a){var c,s,u,l,h;return f().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return c=r.app,s=r.element,u=r.action,t.next=3,chrome.tabs.query({active:!0,currentWindow:!0});case 3:l=t.sent,t.t0=s,t.next="homeShorts"===t.t0||"searchShorts"===t.t0?7:9;break;case 7:return h=b,t.abrupt("break",10);case 9:h=v;case 10:if(!l[0]){t.next=20;break}return t.prev=11,t.next=14,chrome.scripting.executeScript({target:{tabId:l[0].id},func:h,args:[c,s,u,JSON.stringify(m)]});case 14:t.next=19;break;case 16:t.prev=16,t.t1=t.catch(11),console.error("Error executing the script within onMessage:",t.t1);case 19:chrome.storage.local.get("appState",function(){var t=p(f().mark((function t(r){var o,a;return f().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:(o=r.appState)||(o=i);try{a=u===e?"hidden":n,o[c][s].state=a}catch(t){console.error("Error updating the app state:",t)}return t.next=5,chrome.storage.local.set({appState:o});case 5:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}());case 20:case"end":return t.stop()}}),t,null,[[11,16]])})));return function(e,r,n){return t.apply(this,arguments)}}()),chrome.tabs.onActivated.addListener((function(){chrome.tabs.query({active:!0,currentWindow:!0},function(){var r=p(f().mark((function r(o){var a,i,c,u,l,h,p,b;return f().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(!o){r.next=23;break}if(!(a=o[0]).url){r.next=23;break}if(r.prev=3,i=new URL(a.url),c=i.hostname,u=i.pathname,!c.includes(y)){r.next=18;break}return r.next=10,chrome.storage.local.get("appState");case 10:return l=r.sent,h=l.appState,p=d[y].app,b=h.youtube,Object.entries(b).forEach((function(r){var o=s(r,2),i=o[0],c=o[1].state===n?t:e;console.log("The toggle action is",c),chrome.scripting.executeScript({target:{tabId:a.id},func:v,args:[p,i,c,JSON.stringify(m)]})})),h.lastSelectedState.lastSelectedPage=d[c].pages[u],r.next=18,chrome.storage.local.set({appState:h});case 18:r.next=23;break;case 20:r.prev=20,r.t0=r.catch(3),console.error("There was an error:",r.t0);case 23:case"end":return r.stop()}}),r,null,[[3,20]])})));return function(t){return r.apply(this,arguments)}}())})),chrome.tabs.onUpdated.addListener(function(){var r=p(f().mark((function r(o,a,i){var c,u,l,h,p,b,g;return f().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if("complete"!==a.status){r.next=21;break}if(r.prev=1,c=new URL(i.url),u=c.hostname,l=c.pathname,!u.includes(y)){r.next=16;break}return r.next=8,chrome.storage.local.get("appState");case 8:return h=r.sent,p=h.appState,b=d[y].app,g=p.youtube,Object.entries(g).forEach((function(r){var o=s(r,2),a=o[0],c=o[1].state===n?t:e;console.log("The toggle action is",c),chrome.scripting.executeScript({target:{tabId:i.id},func:v,args:[b,a,c,JSON.stringify(m)]})})),p.lastSelectedState.lastSelectedPage=d[u].pages[l],r.next=16,chrome.storage.local.set({appState:p});case 16:r.next=21;break;case 18:r.prev=18,r.t0=r.catch(1),console.error("There was an error:",r.t0);case 21:case"end":return r.stop()}}),r,null,[[1,18]])})));return function(t,e,n){return r.apply(this,arguments)}}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,